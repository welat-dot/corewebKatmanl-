// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dal.ORM.EFCore;

namespace dal.Migrations
{
    [DbContext(typeof(WCdBContext))]
    [Migration("20200909223352_db33")]
    partial class db33
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("entities.tables.AdressDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdressDetails");
                });

            modelBuilder.Entity("entities.tables.CustomerBankInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankName")
                        .HasColumnType("int");

                    b.Property<int>("CustumersAdressDetailsRefId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("varchar(26) CHARACTER SET utf8mb4")
                        .HasMaxLength(26);

                    b.Property<int?>("adressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("adressId");

                    b.ToTable("CustomerBankInformations");
                });

            modelBuilder.Entity("entities.tables.CustomersDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("CustomerSurname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("customersDetails");
                });

            modelBuilder.Entity("entities.tables.CustumersAdressDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustumersAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MyProperty");
                });

            modelBuilder.Entity("entities.tables.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerBankInformationRefId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerDetailsRefId")
                        .HasColumnType("int");

                    b.Property<int>("CustumersAdressDetailsRefId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8);

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8);

                    b.Property<int>("UsetDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("customerBankInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("customersDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("custumersAdressDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerBankInformationId");

                    b.HasIndex("customersDetailsId");

                    b.HasIndex("custumersAdressDetailsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("entities.tables.CustomerBankInformation", b =>
                {
                    b.HasOne("entities.tables.CustumersAdressDetails", "adress")
                        .WithMany()
                        .HasForeignKey("adressId");
                });

            modelBuilder.Entity("entities.tables.Users", b =>
                {
                    b.HasOne("entities.tables.CustomerBankInformation", "customerBankInformation")
                        .WithMany()
                        .HasForeignKey("customerBankInformationId");

                    b.HasOne("entities.tables.CustomersDetail", "customersDetails")
                        .WithMany()
                        .HasForeignKey("customersDetailsId");

                    b.HasOne("entities.tables.CustumersAdressDetails", "custumersAdressDetails")
                        .WithMany()
                        .HasForeignKey("custumersAdressDetailsId");
                });
#pragma warning restore 612, 618
        }
    }
}
